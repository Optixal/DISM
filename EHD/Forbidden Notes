// FORBIDDEN NOTES EHD 2016



Port Numbers:
21, 20  FTP
22      SSH
23      Telnet
25      SMTP
80      HTTP
110     POP3
161     SNMP
443     HTTPS
3306    MySQL



// 20 Apr 2016

// Wireshark Filters
ip.src == 192.168.0.1
ip.dst == 192.168.0.6

// Input Output Graph (To see spikes in activity) (Download.pcap)
Statistics > IO Graph

// Applying Filters Based on a Packet
Select packet > Ethernet II > Right click either src or dst > Apply as filter > Selected

// Color Codes for Packets
View > Coloring Rules



// ICMP (usually ping)
Computer A sends PING REQUEST to Computer B
Computer B sends PING REPLY to Computer A

// Both request and reply have same sequence number

// ICMP Type Codes:
0     Echo Reply
3     Destination Unreachable
7     Destination Host Unknown
8     Echo Request

// Default Time To Live (TTL) for a Packet for OS's
Windows NT+:      128
Linux:            64
Windows 98:       32

// Eg. Pinging a Linux machine with a Windows 10 Computer (Testing OS using Ping's 

TTL.pcap)
ICMP Ping Request	TTL=128
ICMP Ping Reply		TTL=64



// TCP
Computer A sends SYN to Computer B
Computer B sends SYN/ACK to Computer A
Computer A sends ACK to Computer B
// HTTP
Computer A requests (HTTP GET) for web page
Computer B acknowledges and sends web page response

// Capturing TCP 3-way Handshake and HTTP POST
Filter: tcp.flags.ack == 1 || tcp.flags.syn == 1
Filter: http
Filter: http.request.method == POST
Edit > Find Packet > String > Filter: Dinosaur > Packet Bytes

// Reassemble the chopped up TCP packets into a full stream
// Right click on TCP packet > Follow TCP Stream

// Export HTTP files any images from a capture
// File > Export > Objects > HTTP



// TCP and UDP ports (0 - 65535)
21, 20	FTP
25	SMTP
80	HTTP
443	HTTPS

// netstat /?
// netstat -an      // All connections and listening ports with address:port
// netstat -ano     // Same as -an with owning process ID associated with each connection, 

works well with Processes (PID) in Task Manager to find which process has a connection
// netstat -anb     // Similar as -ano, showing executables associated with each connection



// FTP Server
Download Filezilla Server, connect to localhost, add user, add shared file
netstat -an // 0.0.0.0:21
Firewall > Exceptions > Add Port > 21

// FTP Client
ftp <ip>
user, pass
get <file>
// Find out username, password, filename, file contents
Wireshark > Filter > ftp
Wireshark > Filter > ftp-data // Content of files transferred
Filter Packet > String > Filter: "request: pass" > Packet List



// 25 Apr 2016

// telnet
Start service, add exception to firewall port 23
Insecure way of connecting to other computers, smth like ssh
Can capture using Wireshark

// putty.exe
Flexible and secure way of connecting to other computers

// MySQL
Can capture logins and viewing of tables, and even queries.

// ssh (Secure)
Port 22

// sftp (Secure)

// SMTP (using telnet)
// Sending
telnet <ip> <port (25 for SMTP server)>
helo <server>
mail from: <email>
rcpt to: <email>
data
<email msg>
.
quit

// Receive using POP3
telnet <ip> <port 110 for POP3>
user <email>
pass <pass>
list
retr <mail no.>



// 27 Apr 2016

cat /etc/NetworkManager/system-connections/connection

ifconfig eth0 192.168.6.11 netmask 255.255.0.0      // Temporarily sets ip for connection

nmcli connection down Wired\ connection\ 1          // Network Manager Command Line Interface
nmcli connection up Wired\ connection\ 1

arp -a

Wireshark capture a ping, filter arp, find packet with "ip is at mac"

// ARP Spoofing - on attacker machine:
arpspoof –i eth0 –t <victim ip> <ip ur impersonating>

// DNS
cat /etc/resolv.conf        // DNS server being used in Linux
ipconfig                    // DNS server being used in Windows

nslookup        // DNS lookup for Windows
dig             // DNS lookup for Linux
host            // DNS lookup for Linux
Filter in Wireshark dns, find response

ipconfig /displaydns      // DNS cache on Windows
ipconfig /flushdns        // Flushes DNS cache on Windows

C:\Windows\System32\drivers\etc\hosts
Add line 192.168.6.212 www.yahoo.com // Visiting yahoo.com will direct you to 192.168.2.212



// 9 May 2016

snmp // Simple Network Management Protocol on Port 161
snmpwalk -v 2c -c public 192.168.6.211      // Scans 192.168.6.211 with snmpwalk, version 2c, community passphrase "public"

fping // Just like ping, except pings multiple hosts at the same time
fping –g 192.168.6.211 192.168.6.214        // Generate an inclusive list of ip addresses from 192.168.6.211 - 192.168.6.214

hping3 // Crafts any sort of packet and sends to hosts
hping3 –c 1 –S 192.168.10.50 // Sends a SYN packet count of 1 to 192.168.10.50

nmap –sS 192.168.10.100     // TCP SYN scan, scans with SYN packets
nmap -sT 192.168.10.100     // TCP connect() scan
nmap -sV --version-intensity 9 -p 8075 192.168.10.100   // Deep scan for unknown service on a specific port 8075, max intensity of 9 (all protocols in existence)
nmap -O 192.168.10.100      // OS scan
// More Below

// Banner Grabbing with Telnet
telnet 192.168.6.212 80
OPTIONS / HTTP/1.1          // Type this while waiting for host
HOST: 127.0.0.1             // And press enter again
// Server banner will return, showing it is a apache, etc server

nc 192.168.6.212 80
OPTIONS / HTTP/1.1
HOST: 127.0.0.1



// 16 May 2016

// Finding IP of a host from a DNS server
dig google.com							// IP found in "ANSWER SECTION"
dig –t ns nintendo.com					// Retrieves more information about name servers of the host
dig -t mx nintendo.com					// Retreives more information about mail servers of the host
dig @192.168.6.211 server.example.com	// Find ip of server.example.com from DNS server 192.168.6.211 
host server.example.com 192.168.6.211	// ^
host 205.166.76.2						// Looks for hostname for this IP
nslookup								// Windows

// DNS Zone Transfer
dig @192.168.6.211 example.com axfr		// Lists all DNS records of a certain DNS server

// Paros (used for trapping HTTP packets by acting as a proxy)
// Set up proxy on browser, point to localhost:8080
// Browse websites
// Paros captures Requests/Responses/Banners

// Trap > Tick Trap Response // Traps HTTP responses to your browser, thus you can read it, make it continue or drop it



// 18 May 2016

// Nmap Scans that Identifies TCP Ports
-sS		- TCP SYN Scan (Stealthy, TCP half connection, no logging) (default)
-sT		- TCP connect() Scan (Not Stealthy, establishes a full TCP connection)
-sF		- TCP FIN Scan (Stealthy, 1 FIN packet sent and expect 1 RST to be received)
  -sF	- Xmas Tree Scan
  -sN	- Null Scan
-sA		- TCP ACK Scan (for firewall detection)
-sI		- Idlescan
-b		- FTP Bounce Attack

// Nmap Scans that Do Not Identify TCP Ports
-sU		- UDP Scan, one and only
-sW		- Window Scan
-sP		- Pint Scan (Simple way of checking for live hosts)
-sV		- Version Scan of Services (--version-intensity [0-9])
-sO		- IP Scan

// Nmap Useful Commands
nmap -O [ip]									// Scans for operating system running (use --osscan-guess for more aggressive scan)
nmap -sV --version-intensity 9 [ip] -p [ports]	// Scans for unknown services on unknown ports with max intensity, ports optional
nmap -A	[ip]									// Aggressive scan, includes OS detection and service scan (-O and -sV)
nmap -sS -sU -p- [ip]							// Scans all TCP and UDP ports
nmap -sn [ip range]								// Scans a network for online hosts
nmap -sL [ip range]								// Scans a network for all hostnames (or single target)
nmap -F -T4 [ip]								// Fast, quick and dirty scan for open ports
nmap --script=http-title [ip]					// Gathers HTTP page titles on web servers
nmap --script=http-headers [ip]					// Gathers HTTP headers on web servers (banner grabbing) (faster than the other banner grabbing methods)
nmap --script=http-enum [ip]					// Gathers HTTP directories on web servers

/*	Optional flags, add to taste:
	-T4					// Scan speed, T4 produces faster, more aggressive scans, -T5 is too insanely fast)
	-v					// Verbose mode
	--script=[script]	// List of scripts here: locate nse | grep script 

/*	Port Scanning to find open/closed ports
	-sS port scan sends a [SYN] packet to target, trying to establish a 3-way handshake (half 3-way handshake), stealthy
	If port open, target sends back [SYN, ACK], thinking that scanner is trying to est a legit connection, showing that the port is accepting connections and is open, then scanner resets it with [RST], and does NOT complete the handshake (unlike -sT scan)
	If port close, target sends back [SYN, RST], indicating that the target is not accepting connections  */

/*	Exercise 2
	When the system at 192.168.6.211 receives an illegal or unexpected packet, it will replay with an ICMP Destination Unreachable packet
	When you scan the other system 192.168.6.212, if you don't get any response, the port is probably blocked by firewall.
	
	Exercise 4
	UDP Port 53 is open on 192.168.6.211  */

// Ping Sweeps with Forged Source IP Address
hping3 –c 2 –-icmp –a 192.168.20.20 192.168.10.100	// Sends 2 forged ICMP ping packets to 10.100 with the fake address of 20.20




